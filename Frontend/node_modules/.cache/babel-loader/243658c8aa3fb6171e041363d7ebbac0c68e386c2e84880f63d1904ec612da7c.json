{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.isConnected = false;\n    this.messageCallbacks = [];\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n  }\n  connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        // WebSocket URL - backend'de çalışıyor olmalı\n        const wsUrl = 'ws://localhost:8000/ws/chat';\n        this.ws = new WebSocket(wsUrl);\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          resolve();\n        };\n        this.ws.onmessage = event => {\n          try {\n            const data = JSON.parse(event.data);\n            this.handleMessage(data);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        this.ws.onclose = () => {\n          console.log('WebSocket disconnected');\n          this.isConnected = false;\n          this.attemptReconnect();\n        };\n        this.ws.onerror = error => {\n          console.error('WebSocket error:', error);\n          reject(error);\n        };\n      } catch (error) {\n        console.error('Error creating WebSocket connection:', error);\n        reject(error);\n      }\n    });\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n      this.isConnected = false;\n    }\n  }\n  sendMessage(message, tableData = null, context = null) {\n    if (!this.isConnected || !this.ws) {\n      throw new Error('WebSocket is not connected');\n    }\n    const messageData = {\n      message: message,\n      table_data: tableData,\n      context: context,\n      message_id: this.generateMessageId(),\n      timestamp: new Date().toISOString()\n    };\n    this.ws.send(JSON.stringify(messageData));\n    return messageData.message_id;\n  }\n  onMessage(callback) {\n    this.messageCallbacks.push(callback);\n  }\n  handleMessage(data) {\n    this.messageCallbacks.forEach(callback => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error('Error in message callback:', error);\n      }\n    });\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      setTimeout(() => {\n        this.connect().catch(error => {\n          console.error('Reconnection failed:', error);\n        });\n      }, this.reconnectDelay * this.reconnectAttempts);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n  generateMessageId() {\n    return Date.now().toString() + Math.random().toString(36).substr(2, 9);\n  }\n  getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n}\n\n// Singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;","map":{"version":3,"names":["WebSocketService","constructor","ws","isConnected","messageCallbacks","reconnectAttempts","maxReconnectAttempts","reconnectDelay","connect","Promise","resolve","reject","wsUrl","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","handleMessage","error","onclose","attemptReconnect","onerror","disconnect","close","sendMessage","message","tableData","context","Error","messageData","table_data","message_id","generateMessageId","timestamp","Date","toISOString","send","stringify","onMessage","callback","push","forEach","setTimeout","catch","now","toString","Math","random","substr","getConnectionStatus","websocketService"],"sources":["C:/Users/efe_e/OneDrive/Desktop/finqa/Frontend/src/services/websocketService.js"],"sourcesContent":["class WebSocketService {\r\n    constructor() {\r\n        this.ws = null;\r\n        this.isConnected = false;\r\n        this.messageCallbacks = [];\r\n        this.reconnectAttempts = 0;\r\n        this.maxReconnectAttempts = 5;\r\n        this.reconnectDelay = 1000;\r\n    }\r\n\r\n    connect() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                // WebSocket URL - backend'de çalışıyor olmalı\r\n                const wsUrl = 'ws://localhost:8000/ws/chat';\r\n                \r\n                this.ws = new WebSocket(wsUrl);\r\n                \r\n                this.ws.onopen = () => {\r\n                    console.log('WebSocket connected');\r\n                    this.isConnected = true;\r\n                    this.reconnectAttempts = 0;\r\n                    resolve();\r\n                };\r\n                \r\n                this.ws.onmessage = (event) => {\r\n                    try {\r\n                        const data = JSON.parse(event.data);\r\n                        this.handleMessage(data);\r\n                    } catch (error) {\r\n                        console.error('Error parsing WebSocket message:', error);\r\n                    }\r\n                };\r\n                \r\n                this.ws.onclose = () => {\r\n                    console.log('WebSocket disconnected');\r\n                    this.isConnected = false;\r\n                    this.attemptReconnect();\r\n                };\r\n                \r\n                this.ws.onerror = (error) => {\r\n                    console.error('WebSocket error:', error);\r\n                    reject(error);\r\n                };\r\n                \r\n            } catch (error) {\r\n                console.error('Error creating WebSocket connection:', error);\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    disconnect() {\r\n        if (this.ws) {\r\n            this.ws.close();\r\n            this.ws = null;\r\n            this.isConnected = false;\r\n        }\r\n    }\r\n\r\n    sendMessage(message, tableData = null, context = null) {\r\n        if (!this.isConnected || !this.ws) {\r\n            throw new Error('WebSocket is not connected');\r\n        }\r\n\r\n        const messageData = {\r\n            message: message,\r\n            table_data: tableData,\r\n            context: context,\r\n            message_id: this.generateMessageId(),\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        this.ws.send(JSON.stringify(messageData));\r\n        return messageData.message_id;\r\n    }\r\n\r\n    onMessage(callback) {\r\n        this.messageCallbacks.push(callback);\r\n    }\r\n\r\n    handleMessage(data) {\r\n        this.messageCallbacks.forEach(callback => {\r\n            try {\r\n                callback(data);\r\n            } catch (error) {\r\n                console.error('Error in message callback:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    attemptReconnect() {\r\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n            this.reconnectAttempts++;\r\n            console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n            \r\n            setTimeout(() => {\r\n                this.connect().catch(error => {\r\n                    console.error('Reconnection failed:', error);\r\n                });\r\n            }, this.reconnectDelay * this.reconnectAttempts);\r\n        } else {\r\n            console.error('Max reconnection attempts reached');\r\n        }\r\n    }\r\n\r\n    generateMessageId() {\r\n        return Date.now().toString() + Math.random().toString(36).substr(2, 9);\r\n    }\r\n\r\n    getConnectionStatus() {\r\n        return {\r\n            isConnected: this.isConnected,\r\n            reconnectAttempts: this.reconnectAttempts\r\n        };\r\n    }\r\n}\r\n\r\n// Singleton instance\r\nconst websocketService = new WebSocketService();\r\n\r\nexport default websocketService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}